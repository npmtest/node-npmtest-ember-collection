{"/home/travis/build/npmtest/node-npmtest-ember-collection/test.js":"/* istanbul instrument in package npmtest_ember_collection */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-collection/lib.npmtest_ember_collection.js":"/* istanbul instrument in package npmtest_ember_collection */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_collection = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_collection = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-collection/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-collection && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_collection */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_collection\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_collection.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_collection.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_collection.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_collection.__dirname + '/lib.npmtest_ember_collection.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-collection'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/testem.js":"/* jshint node:true */\n\nvar fs = require('fs');\nvar path = require('path');\nvar existsSync = require('exists-sync');\nvar mkdirp = require('mkdirp');\n\nvar isCI = !!process.env['CI'];\n\nvar options = {\n  \"framework\": \"qunit\",\n  \"test_page\": \"tests/index.html?hidepassed\",\n  \"disable_watching\": true,\n  \"xunit_intermediate_output\": true,\n  \"report_file\": \"test-results.xml\",\n  \"launch_in_ci\": [\n    \"Chrome\",\n    \"Firefox\",\n    \"PhantomJS\"\n  ],\n  \"launch_in_dev\": [\n    \"Chrome\",\n    \"Firefox\",\n    \"Safari\",\n    \"PhantomJS\"\n  ]\n};\n\nif (isCI) {\n  var testReportsPath = path.join(process.env['CIRCLE_TEST_REPORTS'], process.env.SCENARIO_GROUP);\n\n  if (!existsSync(testReportsPath)) {\n    mkdirp.sync(testReportsPath);\n  }\n\n  options['reporter'] = 'xunit';\n  options['report_file'] = path.join(testReportsPath, process.env.EMBER_TRY_CURRENT_SCENARIO + '.xml');\n}\n\nmodule.exports = options;\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/config/deploy.js":"/* jshint node: true */\n\nmodule.exports = function(deployTarget) {\n  var ENV = {\n    build: {}\n    // include other plugin configuration that applies to all deploy targets here\n  };\n\n  if (deployTarget === 'development') {\n    ENV.build.environment = 'development';\n    // configure other plugins for development deploy target here\n  }\n\n  if (deployTarget === 'staging') {\n    ENV.build.environment = 'production';\n    // configure other plugins for staging deploy target here\n  }\n\n  if (deployTarget === 'production') {\n    ENV.build.environment = 'production';\n    // configure other plugins for production deploy target here\n  }\n\n  // Note: if you need to build some configuration asynchronously, you can return\n  // a promise that resolves with the ENV object instead of returning the\n  // ENV object synchronously.\n  return ENV;\n};\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/addon/components/ember-collection.js":"import Ember from 'ember';\nimport layout from './ember-collection/template';\nimport identity from '../utils/identity';\nimport needsRevalidate from '../utils/needs-revalidate';\nconst { get, set } = Ember;\n\nclass Cell {\n  constructor(key, item, index, style) {\n    this.key = key;\n    this.hidden = false;\n    this.item = item;\n    this.index = index;\n    this.style = style;\n  }\n}\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  init() {\n    // State pulled from attrs is prefixed with an underscore\n    // so that there's no chance of shadowing the attrs proxy.\n    this._buffer = undefined;\n    this._cellLayout = undefined;\n    this._rawItems = undefined;\n    this._items = undefined;\n    this._scrollLeft = undefined;\n    this._scrollTop = undefined;\n    this._clientWidth = undefined;\n    this._clientHeight = undefined;\n    this._contentSize = undefined;\n\n    // this.firstCell = undefined;\n    // this.lastCell = undefined;\n    // this.cellCount = undefined;\n    this.contentElement = undefined;\n    this._cells = Ember.A();\n    this._cellMap = Object.create(null);\n\n    // TODO: Super calls should always be at the top of the constructor.\n    // I had to move the super call after the properties were defined to\n    // work around what I believe is a bug in the attrs proxy. The problem\n    // seems to arise when you:\n    //\n    //   1. Call this._super() immediately.\n    //   2. Set a property on `this` that is both not in the\n    //      initial attrs hash and not on the prototype.\n    this._super();\n  },\n\n  didInitAttrs() {\n    let buffer = this.getAttr('buffer'); // getIntAttr('buffer', 5)\n    this._buffer = (typeof buffer === 'number') ? buffer : 5;\n    this._scrollLeft = this.getAttr('scroll-left') | 0;\n    this._scrollTop = this.getAttr('scroll-top') | 0;\n    this._clientWidth = this.getAttr('estimated-width') | 0;\n    this._clientHeight = this.getAttr('estimated-height') | 0;\n    this._scrollChange = this.getAttr('scroll-change');\n  },\n\n  _needsRevalidate(){\n    if (this._isGlimmer2()) {\n      this.rerender();\n    } else {\n      needsRevalidate(this);\n    }\n  },\n\n  didReceiveAttrs() {\n    // Work around emberjs/ember.js#11992. Affects <=1.13.8 and <=2.0.0.\n    // This will likely be patched in 1.13.9 and 2.0.1.\n    this._super();\n\n    this.updateItems();\n    this.updateScrollPosition();\n  },\n\n  updateItems(){\n    this._cellLayout = this.getAttr('cell-layout');\n    var rawItems = this.getAttr('items');\n\n    if (this._rawItems !== rawItems) {\n      if (this._items && this._items.removeArrayObserver) {\n        this._items.removeArrayObserver(this, {\n          willChange: Ember.K,\n          didChange: '_needsRevalidate'\n        });\n      }\n      this._rawItems = rawItems;\n      var items = Ember.A(rawItems);\n      this.set('_items', items);\n\n      if (items && items.addArrayObserver) {\n        items.addArrayObserver(this, {\n          willChange: Ember.K,\n          didChange: '_needsRevalidate'\n        });\n      }\n    }\n  },\n\n  updateScrollPosition(){\n    if (!this._scrollChange) { return; } // don't process bound scroll coords unless our action is being handled\n    let scrollLeftAttr = this.getAttr('scroll-left');\n    if (scrollLeftAttr !== undefined) {\n      scrollLeftAttr = parseInt(scrollLeftAttr, 10);\n      if (this._scrollLeft !== scrollLeftAttr) {\n        this.set('_scrollLeft', scrollLeftAttr);\n      }\n    }\n\n    let scrollTopAttr = this.getAttr('scroll-top');\n    if (scrollTopAttr !== undefined) {\n      scrollTopAttr = parseInt(scrollTopAttr, 10);\n      if (this._scrollTop !== scrollTopAttr) {\n        // console.log('updateScrollPosition', this._scrollTop, scrollTopAttr);\n        this.set('_scrollTop', scrollTopAttr);\n      }\n    }\n  },\n\n  updateContentSize() {\n    var cellLayout = this._cellLayout;\n    var contentSize = cellLayout.contentSize(this._clientWidth, this._clientHeight);\n    if (this._contentSize === undefined ||\n        contentSize.width !== this._contentSize.width ||\n        contentSize.height !== this._contentSize.height) {\n      this.set('_contentSize', contentSize);\n    }\n  },\n\n  willRender: function() {\n    this.updateCells();\n    this.updateContentSize();\n  },\n\n  updateCells() {\n    if (!this._items) { return; }\n    const numItems = get(this._items, 'length');\n    if (this._cellLayout.length !== numItems) {\n      this._cellLayout.length = numItems;\n    }\n\n    var priorMap = this._cellMap;\n    var cellMap = Object.create(null);\n\n    var index = this._cellLayout.indexAt(this._scrollLeft, this._scrollTop, this._clientWidth, this._clientHeight);\n    var count = this._cellLayout.count(this._scrollLeft, this._scrollTop, this._clientWidth, this._clientHeight);\n    var items = this._items;\n    var bufferBefore = Math.min(index, this._buffer);\n    index -= bufferBefore;\n    count += bufferBefore;\n    count = Math.min(count + this._buffer, get(items, 'length') - index);\n    var i, style, itemIndex, itemKey, cell;\n\n    var newItems = [];\n\n    for (i=0; i<count; i++) {\n      itemIndex = index+i;\n      itemKey = identity(items.objectAt(itemIndex));\n      if (priorMap) {\n        cell = priorMap[itemKey];\n      }\n      if (cell) {\n        style = this._cellLayout.formatItemStyle(itemIndex, this._clientWidth, this._clientHeight);\n        set(cell, 'style', style);\n        set(cell, 'hidden', false);\n        set(cell, 'key', itemKey);\n        cellMap[itemKey] = cell;\n      } else {\n        newItems.push(itemIndex);\n      }\n    }\n\n    for (i=0; i<this._cells.length; i++) {\n      cell = this._cells[i];\n      if (!cellMap[cell.key]) {\n        if (newItems.length) {\n          itemIndex = newItems.pop();\n          let item = items.objectAt(itemIndex);\n          itemKey = identity(item);\n          style = this._cellLayout.formatItemStyle(itemIndex, this._clientWidth, this._clientHeight);\n          set(cell, 'style', style);\n          set(cell, 'key', itemKey);\n          set(cell, 'index', itemIndex);\n          set(cell, 'item', item);\n          set(cell, 'hidden', false);\n          cellMap[itemKey] = cell;\n        } else {\n          set(cell, 'hidden', true);\n          set(cell, 'style', 'height: 0; display: none;');\n        }\n      }\n    }\n\n    for (i=0; i<newItems.length; i++) {\n      itemIndex = newItems[i];\n      let item = items.objectAt(itemIndex);\n      itemKey = identity(item);\n      style = this._cellLayout.formatItemStyle(itemIndex, this._clientWidth, this._clientHeight);\n      cell = new Cell(itemKey, item, itemIndex, style);\n      cellMap[itemKey] = cell;\n      this._cells.pushObject(cell);\n    }\n    this._cellMap = cellMap;\n  },\n\n  _isGlimmer2() {\n    return !this._renderNode;\n  },\n\n  actions: {\n    scrollChange(scrollLeft, scrollTop) {\n      if (this._scrollChange) {\n        // console.log('ember-collection sendAction scroll-change', scrollTop);\n        this.sendAction('scroll-change', scrollLeft, scrollTop);\n      } else {\n        if (scrollLeft !== this._scrollLeft ||\n            scrollTop !== this._scrollTop) {\n          set(this, '_scrollLeft', scrollLeft);\n          set(this, '_scrollTop', scrollTop);\n          this._needsRevalidate();\n        }\n      }\n    },\n    clientSizeChange(clientWidth, clientHeight) {\n      if (this._clientWidth !== clientWidth ||\n          this._clientHeight !== clientHeight) {\n        set(this, '_clientWidth', clientWidth);\n        set(this, '_clientHeight', clientHeight);\n        this._needsRevalidate();\n      }\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/addon/components/ember-native-scrollable.js":"import Ember from 'ember';\nimport { translate } from 'ember-collection/utils/translate';\nimport { styleProperty } from 'ember-collection/utils/style-properties';\n\nconst overflowScrollingProp = styleProperty('overflowScrolling');\n\nexport default Ember.Component.extend({\n  init() {\n    this._clientWidth = 0;\n    this._clientHeight = 0;\n    this._scrollLeft = 0;\n    this._scrollTop = 0;\n    this._animationFrame = undefined;\n    this._super();\n  },\n  didReceiveAttrs() {\n    this._contentSize = this.getAttr('content-size');\n    this._scrollLeft = this.getAttr('scroll-left');\n    this._scrollTop = this.getAttr('scroll-top');\n  },\n  didInsertElement() {\n    this.contentElement = this.element.firstElementChild;\n    this.applyStyle();\n    this.applyContentSize();\n    this.syncScrollFromAttr();\n    this.startScrollCheck();\n  },\n  didUpdate() {\n    this.applyContentSize();\n    this.syncScrollFromAttr();\n  },\n  willDestroyElement() {\n    this.cancelScrollCheck();\n    this.contentElement = undefined;\n  },\n  applyStyle() {\n    if (overflowScrollingProp) {\n      this.element.style.overflow = 'scroll';\n      this.element.style[overflowScrollingProp] = 'touch';\n    } else {\n      this.element.style.overflow = 'auto';\n    }\n\n    // hack to force render buffer so outside doesn't repaint on scroll\n    translate(this.element, 0, 0);\n\n    this.element.style.position = 'absolute';\n    this.element.style.left = 0;\n    this.element.style.top = 0;\n    this.element.style.bottom = 0;\n    this.element.style.right = 0;\n  },\n  applyContentSize() {\n    this.contentElement.style.position = 'relative';\n    this.contentElement.style.width = this._contentSize.width + 'px';\n    this.contentElement.style.height = this._contentSize.height + 'px';\n  },\n  syncScrollFromAttr() {\n    if (this._appliedScrollTop !== this._scrollTop) {\n      this._appliedScrollTop = this._scrollTop;\n      if (this._scrollTop >= 0) {\n        this.element.scrollTop = this._scrollTop;\n      }\n    }\n    if (this._appliedScrollLeft !== this._scrollLeft) {\n      this._appliedScrollLeft = this._scrollLeft;\n      if (this._scrollLeft >= 0) {\n        this.element.scrollLeft = this._scrollLeft;\n      }\n    }\n  },\n  startScrollCheck() {\n    const component = this;\n    function step() {\n      component.scrollCheck();\n      nextStep();\n    }\n    function nextStep() {\n      if (window.requestAnimationFrame) {\n        component._animationFrame = requestAnimationFrame(step);\n      } else {\n        component._animationFrame = setTimeout(step, 16);\n      }\n    }\n    nextStep();\n  },\n  cancelScrollCheck() {\n    if (this._animationFrame) {\n      if (window.requestAnimationFrame) {\n        cancelAnimationFrame(this._animationFrame);\n      } else {\n        clearTimeout(this._animationFrame);\n      }\n      this._animationFrame = undefined;\n    }\n  },\n  scrollCheck() {\n    let element = this.element;\n    let scrollLeft = element.scrollLeft;\n    let scrollTop = element.scrollTop;\n    let scrollChanged = false;\n    if (scrollLeft !== this._appliedScrollLeft || scrollTop !== this._appliedScrollTop) {\n      scrollChanged = true;\n      this._appliedScrollLeft = scrollLeft;\n      this._appliedScrollTop = scrollTop;\n    }\n\n    let clientWidth = element.clientWidth;\n    let clientHeight = element.clientHeight;\n    let clientSizeChanged = false;\n    if (clientWidth !== this._clientWidth || clientHeight !== this._clientHeight) {\n      clientSizeChanged = true;\n      this._clientWidth = clientWidth;\n      this._clientHeight = clientHeight;\n    }\n\n    if (scrollChanged || clientSizeChanged) {\n      Ember.run.join(this, function sendActionsFromScrollCheck(){\n        if (scrollChanged) {\n          this.sendAction('scrollChange', scrollLeft, scrollTop);\n        }\n        if (clientSizeChanged) {\n          this.sendAction('clientSizeChange', clientWidth, clientHeight);\n        }\n      });\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/addon/layouts/grid.js":"import FixedGrid from 'layout-bin-packer/fixed-grid';\nimport {formatPixelStyle} from '../utils/style-generators';\n\nexport default class Grid\n{\n  constructor(cellWidth, cellHeight) {\n    this.length = 0;\n    this.bin = new FixedGrid(this, cellWidth, cellHeight);\n  }\n\n  contentSize(clientWidth/*, clientHeight*/) {\n    return {\n      width: clientWidth,\n      height: this.bin.height(clientWidth)\n    };\n  }\n\n  indexAt(offsetX, offsetY, width, height) {\n    return this.bin.visibleStartingIndex(offsetY, width, height);\n  }\n\n  positionAt(index, width /*,height*/) {\n    return this.bin.position(index, width);\n  }\n\n  widthAt(index) {\n    return this.bin.widthAtIndex(index);\n  }\n\n  heightAt(index) {\n    return this.bin.heightAtIndex(index);\n  }\n\n  count(offsetX, offsetY, width, height) {\n    return this.bin.numberVisibleWithin(offsetY, width, height, true);\n  }\n\n  formatItemStyle(itemIndex, clientWidth, clientHeight) {\n    let pos = this.positionAt(itemIndex, clientWidth, clientHeight);\n    let width = this.widthAt(itemIndex, clientWidth, clientHeight);\n    let height = this.heightAt(itemIndex, clientWidth, clientHeight);\n    return formatPixelStyle(pos, width, height);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/addon/layouts/mixed-grid.js":"import ShelfFirst from 'layout-bin-packer/shelf-first';\nimport {formatPixelStyle} from '../utils/style-generators';\n\nexport default class MixedGrid\n{\n  constructor(content, width) {\n    this.content = content;\n    this.bin = new ShelfFirst(content, width);\n  }\n\n  contentSize(clientWidth/*, clientHeight*/) {\n    return {\n      width: clientWidth,\n      height: this.bin.height(clientWidth)\n    };\n  }\n\n  indexAt(offsetX, offsetY, width, height) {\n    return this.bin.visibleStartingIndex(offsetY, width, height);\n  }\n\n  positionAt(index, width, height) {\n    return this.bin.position(index, width, height);\n  }\n\n  widthAt(index) {\n    return this.bin.widthAtIndex(index);\n  }\n\n  heightAt(index) {\n    return this.bin.heightAtIndex(index);\n  }\n\n  count(offsetX, offsetY, width, height) {\n    return this.bin.numberVisibleWithin(offsetY, width, height, true);\n  }\n  \n  formatItemStyle(itemIndex, clientWidth, clientHeight) {\n    let pos = this.positionAt(itemIndex, clientWidth, clientHeight);\n    let width = this.widthAt(itemIndex, clientWidth, clientHeight);\n    let height = this.heightAt(itemIndex, clientWidth, clientHeight);\n    return formatPixelStyle(pos, width, height);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/addon/layouts/percentage-columns.js":"import ShelfFirst from 'layout-bin-packer/shelf-first';\nimport {formatPercentageStyle} from '../utils/style-generators';\nimport Ember from 'ember';\n\nexport default class MixedGrid\n{\n  // How this layout works is by creating a fake grid that is 100px wide.\n  // Each item's width is set to be the size of the column. The ShelfFirst lays out everything according to this fake grid.\n  // When ember-collection asks for the style in formatItemStyle we pull the percent property to use as the width.\n  constructor(itemCount, columns, height) {\n    let total = columns.reduce(function(a, b) {\n        return a+b;\n    });\n    // Assert that the columns add up to 100. We don't want to infoce that they are EXACTLY 100 in case the user wants to use percentages.\n    // for example [33.333, 66.666]\n    Ember.assert('All columns must total 100 ' + total, total > 99 && total <= 100 );\n    let positions = [];\n    var ci = 0;\n    for (var i = 0; i < itemCount; i++) {\n        positions.push({\n            width: columns[ci],\n            height: height,\n            percent: columns[ci]\n        });\n        \n        ci++;\n        \n        if (ci >= columns.length) {\n            ci = 0;\n        }\n    }\n    this.positions = positions;\n    this.bin = new ShelfFirst(positions, 100);\n  }\n\n  contentSize(clientWidth/*, clientHeight*/) {\n    let size = {\n      width: clientWidth,\n      height: this.bin.height(100)\n    };\n    return size;\n  }\n\n  indexAt(offsetX, offsetY, width, height) {\n    return this.bin.visibleStartingIndex(offsetY, 100, height);\n  }\n\n  positionAt(index, width, height) {\n    return this.bin.position(index, 100, height);\n  }\n\n  widthAt(index) {\n    return this.bin.widthAtIndex(index);\n  }\n\n  heightAt(index) {\n    return this.bin.heightAtIndex(index);\n  }\n\n  count(offsetX, offsetY, width, height) {\n    return this.bin.numberVisibleWithin(offsetY, 100, height, true);\n  }\n \n  formatItemStyle(itemIndex, clientWidth, clientHeight) {\n    let pos = this.positionAt(itemIndex, 100, clientHeight);\n    let width = this.positions[itemIndex].percent;\n    let height = this.heightAt(itemIndex, 100, clientHeight);\n    let x = Math.floor((pos.x / 100) * clientWidth);\n    return formatPercentageStyle({x:x, y:pos.y}, width, height);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/addon/utils/identity.js":"import Ember from 'ember';\n\nexport default function identity(item) {\n  let key;\n  let type = typeof item;\n\n  if (type === 'string' || type === 'number') {\n    key = item;\n  } else {\n    key = Ember.guidFor(item);\n  }\n\n  return key;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/addon/utils/needs-revalidate.js":"export default function needsRevalidate(view){\n  view._renderNode.isDirty = true;\n  view._renderNode.ownerNode.emberView.scheduleRevalidate(view._renderNode, view.toString(), 'rerendering via needsRevalidate');\n}\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/addon/utils/style-generators.js":"import { translateCSS } from './translate';\n\nexport function formatPixelStyle(pos, width, height) {\n  let css = 'position:absolute;top:0;left:0;';\n  css += translateCSS(pos.x, pos.y);\n  css += 'width:' + width + 'px;height:' + height + 'px;';\n  return css;\n}\n\nexport function formatPercentageStyle(pos, width, height) {\n  let css = 'position:absolute;top:0;left:0;';\n  css += translateCSS(pos.x, pos.y);\n  css += 'width:' + width + '%;height:' + height + 'px;';\n  return css;\n}","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/addon/utils/style-properties.js":"import Ember from 'ember';\n\nconst { camelize, capitalize } = Ember.String;\nconst stylePrefixes  = ['Webkit',  'ms',  'Moz',  'O'];\nconst cssPrefixes    = ['-webkit-','-ms-','-moz-','-o-'];\n\nconst style = typeof document !== 'undefined' && document.documentElement && document.documentElement.style;\n\nfunction findProperty(property, css) {\n  let prop = css ? camelize(property) : property;\n  if (prop in style) {\n    return property;\n  }\n  let capitalized = capitalize(prop);\n  for (let i=0; i<stylePrefixes.length; i++) {\n    let prefixed = stylePrefixes[i] + capitalized;\n    if (prefixed in style) {\n      return css ? cssPrefixes[i] + property : prefixed;\n    }\n  }\n}\n\nexport function styleProperty(prop) {\n  return findProperty(prop, false);\n}\n\nexport function cssProperty(cssProp) {\n  return findProperty(cssProp, true);\n}\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/addon/utils/translate.js":"import { styleProperty, cssProperty } from './style-properties';\n\nconst transformCSSProp   = cssProperty('transform');\nconst transformStyleProp = styleProperty('transform');\nexport const supports3D  = !!styleProperty('perspectiveOrigin');\nexport const supports2D  = !!transformStyleProp;\n\nexport function translatePosition(el, x, y) {\n  el.style.left = x+'px';\n  el.style.top  = y+'px';\n}\n\nexport function translateTransform2D(el, x, y) {\n  el.style[transformStyleProp] = matrix2D(x, y);\n}\n\nexport function translateTransform3D(el, x, y) {\n  el.style[transformStyleProp] = matrix3D(x, y);\n}\n\nexport function translatePositionCSS(x, y) {\n  return `left:${x}px;top:${y}px;`;\n}\n\nexport function translateTransform2DCSS(x, y) {\n  return `${transformCSSProp}:${matrix2D(x, y)};`;\n}\n\nexport function translateTransform3DCSS(x, y) {\n  return `${transformCSSProp}:${matrix3D(x, y)};`;\n}\n\nfunction matrix2D(x, y) {\n  return `matrix(1, 0, 0, 1, ${x}, ${y})`;\n}\n\nfunction matrix3D(x, y) {\n  return `matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ${x}, ${y}, 0, 1)`;\n}\n\nexport const translate = (\n  supports3D ? translateTransform3D : (\n    supports2D ? translateTransform2D : translatePosition\n  )\n);\n\nexport const translateCSS = (\n  supports3D ? translateTransform3DCSS : (\n    supports2D ? translateTransform2DCSS : translatePositionCSS\n  )\n);\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/app/components/ember-collection.js":"export { default } from 'ember-collection/components/ember-collection';\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/app/components/ember-native-scrollable.js":"export { default } from 'ember-collection/components/ember-native-scrollable';\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/app/helpers/fixed-grid-layout.js":"import Ember from 'ember';\nimport Grid from 'ember-collection/layouts/grid';\n\nexport default Ember.Helper.helper(function (params, hash) {\n  return new Grid(params[0], params[1]);\n});\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/app/helpers/mixed-grid-layout.js":"import Ember from 'ember';\nimport MixedGrid from 'ember-collection/layouts/mixed-grid';\n\nexport default Ember.Helper.helper(function (params, hash) {\n  return new MixedGrid(params[0]);\n});\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/app/helpers/percentage-columns-layout.js":"import Ember from 'ember';\nimport PercentageColumns from 'ember-collection/layouts/percentage-columns';\n\nexport default Ember.Helper.helper(function (params, hash) {\n  return new PercentageColumns(params[0], params[1], params[2]);\n});","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/config/ember-try/allowed-failures.js":"/* jshint node:true */\n\nmodule.exports = {\n  scenarios: [\n    {\n      name: 'ember-canary',\n      allowedToFail: true,\n      dependencies: {\n        'ember': 'canary'\n      },\n      resolutions: {\n        'ember': 'canary'\n      }\n    },\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/config/ember-try/channels.js":"/* jshint node:true */\n\nmodule.exports = {\n  scenarios: [\n    {\n      name: 'ember-release',\n      bower: {\n        dependencies: {\n          'ember': 'release'\n        },\n\n        resolutions: {\n          'ember': 'release'\n        }\n      }\n    },\n    {\n      name: 'ember-beta',\n      dependencies: {\n        'ember': 'beta'\n      },\n      resolutions: {\n        'ember': 'beta'\n      }\n    }\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-ember-collection/node_modules/ember-collection/config/ember-try/releases.js":"module.exports = {\n  scenarios: [\n    {\n      name: 'ember-1.13',\n      bower: {\n        dependencies: {\n          \"ember\": \"~1.13.13\"\n        },\n        devDependencies: { }\n      }\n    },\n    {\n      name: 'ember-2.0',\n      dependencies: {\n        \"ember\": \"~2.0.0\"\n      },\n      devDependencies: { }\n    },\n    {\n      name: 'ember-2.1',\n      dependencies: {\n        \"ember\": \"~2.1.0\"\n      },\n      devDependencies: { }\n    },\n    {\n      name: 'ember-2.2',\n      dependencies: {\n        \"ember\": \"~2.2.0\"\n      },\n      devDependencies: { }\n    },\n    {\n      name: 'ember-2.3',\n      dependencies: {\n        \"ember\": \"~2.3.0\"\n      },\n      devDependencies: { }\n    }\n  ]\n};\n"}